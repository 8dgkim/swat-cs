2022.11.08.

heapsort & analysis of heapify
review Dictionary
    ADT
    BST implementation
    AVL implementation
new Dictionary implementation: hash table

heap
    complete binary tree (1101.txt)

heapsort
    use heap to sort
    can use max heap to get list of elements in sorted order
    runtime O(nlogn)
        same runtime as mergesort; also heapsort in place

heapify
    take vector and turn it into heap
    bubble up & bubble down



Dictionary ADT
    templated on keys & values

    template
        void insert(K key, V value)
        V remove(K key)
        V get(K key)
        void update(K key, V value)


implementation
    BST
        O(h)
            where h is height worst case
            h = O(h)

    AVL
        O(log_2^n)

idea
    can we use arrays (w/ O(1) access) to implement Dictionaries?

hash table
    implementing Dictionaries as arrays
    trade space for efficiency (space-time tradeoff)
    pro: arrays have O(1) access
    but: need to figure out how to take a (key, value) and decide where to put it in the array
    mapping of key -> array index called hash functions
    array origanized this way = hash table

    e.g.
        int hash(int key, int capacity)
            int index = key % capacity // mod: remainder
            if index < 0
                index += capacity
            return index
    
    if two keys has to same index -> collision

    e.g.
        keys of type string
        hash function: string -> int
        ASCII

        int hash(string key, int capacity)
            int total = 0
            for i = 0 to key.len()
                total *= 7 // prime number good choice for math reasons
                total += ASCII value of key[i]
            return total % capacity

        proposal to reduce collision
            use multiplier based on letter position

hash table vocabulary
    capacity
    size
    collision
    load factor = size / capacity
        float measuring how full hast table is

how to deal with collisions
    1. probing: if this index already full, look for next empty spot
        insert; get; remove
        issue: probe finds gap, but when 11 inserted, was not a gap
    2. chaining: every spot in the hash table points to a linked list, not a single item
        to implement "get" we should
            hash to correct index
            do linear search of the chain
        as long as hash function spreads out the keys, each chain should be short
        space-time tradeoff
        track load factor (size/capacity) after every insert; increase capacity when load factor gets height

        assumptions
            hash function spreads out keys
            ok w/ using lots of space
        
        overall, the assumptions will make all Dictionary operations (insert; get; remove; contains) fast
            O(1) amortized
            resize takes time

        